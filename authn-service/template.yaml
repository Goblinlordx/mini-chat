AWSTemplateFormatVersion: 2010-09-09
Description: >-
  User pool with google login example

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  UserPoolDomainPrefix:
    Type: String
  ClientDomains:
    Type: CommaDelimitedList
    Description: Array of domains allowed for use by UserPool
    Default: http://localhost:8080
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID
    Default: invalid
  GoogleClientSecret:
    Type: String
    Description: Google OAuth Client Secret
    Default: invalid
  EmailDomainWhitelist:
    Type: String
    Description: Whitelist of allowed email domains
    Default: ""
  EmailWhitelist:
    Type: String
    Description: Whitelist of allowed emails
    Default: ""

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Mutable: true
        - AttributeDataType: Boolean
          Name: email_verified
          Mutable: true
      UserPoolTags:
        AppManagerCFNStackKey: !Sub ${AWS::StackName}-UserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn:
      - UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      SupportedIdentityProviders:
        - Google
      CallbackURLs: !Ref ClientDomains
      LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  UserPoolGoogleIDP:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      ProviderName: Google
      ProviderType: Google
      UserPoolId: !Ref UserPool
      AttributeMapping:
        email: email
        email_verified: email_verified
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: email profile openid

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${UserPoolDomainPrefix}-${AWS::AccountId}
      UserPoolId: !Ref UserPool

  PreSignUpLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/presignup
      Handler: index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          EMAIL_DOMAIN_WHITELIST: !Ref EmailDomainWhitelist
          EMAIL_WHITELIST: !Ref EmailWhitelist
      Events:
        CognitoTrigger:
          Type: Cognito
          Properties:
            Trigger: PreSignUp
            UserPool: !Ref UserPool
    Metadata:
      BuildMethod: esbuild
      Minify: true
      Target: es2022
      EntryPoints:
      - index.ts

Outputs:
  UserPoolId:
    Description: "User Pool ID"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "User Pool Client Id"
    Value: !Ref UserPoolClient
  GoogleRedirectUrl:
    Description: "Google Redirect URL"
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/oauth2/idpresponse
  AuthUrl:
    Description: "Authentication URL"
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login
