AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31

Resources:
  MessageApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-api
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  ApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    - MessageRoute
    Properties:
      ApiId: !Ref MessageApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: V1
      Description: Version 1 'stage'
      DeploymentId: !Ref ApiDeployment
      ApiId: !Ref MessageApi

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MessageApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MessageApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations"

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/onconnect
      Handler: index.handler
      Runtime: nodejs18.x
      # Environment:
      #   Variables:
      #     TABLE_NAME: !Ref TableName
      # Policies:
      # - DynamoDBCrudPolicy:
      #     TableName: !Ref TableName
    Metadata:
      BuildMethod: esbuild
      Minify: true
      Target: es2022
      EntryPoints:
      - index.ts

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
        FunctionName: !GetAtt OnConnectFunction.Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MessageApi.ApiId}/*"


  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MessageApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MessageApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations"

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/ondisconnect
      Handler: index.handler
      Runtime: nodejs18.x
      # Environment:
      #   Variables:
      #     TABLE_NAME: !Ref TableName
      # Policies:
      # - DynamoDBCrudPolicy:
      #     TableName: !Ref TableName
    Metadata:
      BuildMethod: esbuild
      Minify: true
      Target: es2022
      EntryPoints:
      - index.ts

  OnDisonnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
        FunctionName: !GetAtt OnDisconnectFunction.Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MessageApi.ApiId}/*"

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MessageApi
      RouteKey: message
      AuthorizationType: NONE
      OperationName: MessageRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref MessageInteg

  MessageInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MessageApi
      Description: Message Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnMessageFunction.Arn}/invocations"

  OnMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/onmessage
      Handler: index.handler
      Runtime: nodejs18.x
      # Environment:
      #   Variables:
      #     TABLE_NAME: !Ref TableName
      # Policies:
      # - DynamoDBCrudPolicy:
      #     TableName: !Ref TableName
    Metadata:
      BuildMethod: esbuild
      Minify: true
      Target: es2022
      EntryPoints:
      - index.ts

  OnMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
        FunctionName: !GetAtt OnMessageFunction.Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MessageApi.ApiId}/*"